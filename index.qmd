---
title: "Git and GitHub for Neurosciences"
subtitle: "A brief introduction to version control"
author: "Joscha Schmiedt"
format: 
    revealjs:
        slide-number: true        
        header: Git for Neurosciences
        header-logo: img/UHB_Logo_Web_RGB.png
        template-partials:
        - title-slide.html
mermaid:
    theme: neutral
filters:
    - reveal-header
---

## Overview

1. Why Git? Why GitHub?
2. Installation & Setup^[once per computer]: Git, GitHub, VS Code
3. Git going^[every day]!


::: {.incremental}
::: {.aside}
- [Happy Git and GitHub for the UseR](https://happygitwithr.com)
- Learn Git in a playful way: [Oh my Git!](https://ohmygit.org)
- Bryan J. 2017. [Excuse me, do you have a moment to talk about version control?](https://doi.org/10.7287/peerj.preprints.3159v2)
:::
:::

# Why Git? Why GitHub?

## The *problem*

How to handle multiple versions of your work? 

::: {.fragment}
Filename-based?
```{mermaid}
flowchart LR
    A[lab_report] --> B[lab_report2]
    B --> C[lab_report061024]
    C --> D[lab_report_final]
    D --> E[lab report FINAL2]
```

:::

::: {.notes}
Problems: manual bookkeeping error prone, date format?
:::

::: {.fragment}

What if someone else works on it?
```{mermaid}
%%| fig-responsive: false
%%| fig-width: 6.5


flowchart LR
    D[lab_report_final]
    E[lab_report_final_ProfDrDrSmith] --> F[lab report FINAL2]
    G[lab_report_final_Mum] --> F[lab report FINAL2]
    D --> F
    D --> E
    D --> G
    
```
:::

::: {.fragment}
Maybe not...
:::


## The *solution*: version control

::: {.incremental}
- Keep track of all changes to files in a project^[like Word but better]:
  - **What** was changed?
  - **Who** changed it?
  - **When** was it changed?
- Revert, annotate compare and merge changes
:::

::: {.fragment}
The *What/Who/When* is called a **Commit**.
:::

## Git is a version control system!

A **commit** is a complete snapshot of your work, with a unique identifier, an author and timestamp.
```{mermaid}
%%| fig-width: 20
gitGraph
    commit
    commit
    commit
    commit
```

::: {.fragment}
You can still give meaningful names by using **tags**
```{mermaid}
%%| fig-width: 20

gitGraph
    commit
    commit tag: "SfN abstract"
    commit
    commit
    commit tag: "JNeurosci Initial Submission"
    commit
```
:::

## Git is a version control system!
Experiment and discard by working in a **branch**.

```{mermaid}
gitGraph
    commit
    commit
    branch tryout_coherence
    commit
    commit
    commit
    checkout main
    commit
    commit
```

Collaborate by **branching** and **merging**
```{mermaid}
gitGraph
    commit
    commit
    branch new_metric_by_Hans
    commit
    commit
    commit
    checkout main
    commit
    commit
    merge new_metric_by_Hans
    commit
    commit
```



## Why Git? Why GitHub?

- Git manages the evolution of a set of files (repository) **on your computer**.
- GitHub provides a home for your Git-based projects on the internet enabling collaboration
  and distribution of your work.

# Installation & Setup

## [Install Git](https://happygitwithr.com/install-git)

- Windows: [https://gitforwindows.org](https://gitforwindows.org)
- Linux (Debian/Ubuntu): `sudo apt-get install git`
- macOS: `xcode-select --install`

## Create GitHub account

- Go to [github.com/signup](https://github.com/signup)
- Free private and public repositories

## Install VS Code {.smaller}

- [https://code.visualstudio.com/download](https://code.visualstudio.com/download)
- Install [several useful extensions](https://davrot.github.io/pytutorial/workflow/vscode_install/)
  - Python
  - Pylance
  - Jupyter
  - Jupyter Slide Show
  - Flake8
  - Black Formatter
  - Mypy
  - Inden Rainbow

## [Introduce yourself to Git](https://happygitwithr.com/hello-git)

On your computer:
```bash
git config --global user.name "Andrew Huxley"
git config --global user.email "andrew@huxley.science"
git config --global --list
```

## Optional: Install Python

1. Directly from [https://www.python.org](https://www.python.org) (requires manual installation of extra packages)
2. Using the [Anaconda distribution](https://www.anaconda.com)
3. Using the [neuro-conda distribution](https://github.com/neuro-conda/neuro-conda) (many neuroscience packages included, see [here for an introduction](https://pantaray.github.io/neuro-conda-bremen-2023/#/title-slide))


# Git going!

## Git Terminology Cheatsheet {.smaller}

::: {.incremental}

- **Repository**: Set of files in a folder that are tracked
- **`git clone`**: Copy a repository to your local machine
- **`git init`**: Initialize a folder as a git repository (adds a .git folder)
- **`git pull`**: Get and apply latest changed from remote server
- **`git add`**: *Stage* a new file or change to an existing file for the next...
- **`git commit`**: Create a snapshot of the tracked files (who/what/when) (locally)
- **`git branch`**: Branch off the main branch
- **`git checkout`**: Go to a specific commit or branch
- **`git diff`**: Compare commits to each other
- **`git tag`**: Give a name to a particular commit 

:::

## GitHub Terminology Cheatsheet {.smaller}

::: {.incremental}

- **Repository**: Set of files in a folder that are tracked
- **Fork**: A personal branch off a repository
- **Pull Request**: A request to include someones elses changes into your repository
- **Issue**: A bug, an idea, a task, ...

:::

::: {.fragment .gray}

:::::: {.aside}
You probably don't or rarely need: `revert`, `fetch`, `merge`, `reset`, `rebase`
::::::
:::

## Daily workflow

1. (`git clone` or `git pull`)
2. Make local changes and save.
3. Stage changes (`git add`) and commit (`git commit`)
4. Push your local changes to remote (`git push`)
5. Goto 1.

## Git Exercise {.smaller}


1. Initialize a folder as a repository (`git init`)
2. Add a file, edit and save.
3. Stage the file for a commit (`git add`)
4. Make a commit (`git commit`).
5. Modify the file, save.
6. Observe the difference (`git diff`)
7. Make another commit.
8. Observe the history (`git log`)

## GitHub Exercise {.smaller}


1. Login to [GitHub](github.com)
2. Create a repository
3. Clone the repository
4. Create a file and commit it.
5. Push the change to GitHub.
6. Check on [GitHub](github.com) whether your changes have arrived.